AWSTemplateFormatVersion: 2010-09-09
Resources:
  LogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: '/aws/lambda/{{ service_name }}'
  IamRoleLambdaExecution:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: {{ service_name }}-lambda
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                Resource:
                  - !Sub >-
                    arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/{{ service_name }}:*
              - Effect: Allow
                Action:
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub >-
                    arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/{{ service_name }}:*:*
      Path: /
      RoleName: {{ service_name }}-lambda
  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !ImportValue exported-deployment-bucket
        S3Key: !Sub demo/{{ service_name }}.zip
      FunctionName: {{ service_name }}
      Handler: {{ service_name}}.index
      MemorySize: 1024
      Role: !GetAtt
        - IamRoleLambdaExecution
        - Arn
      Runtime: nodejs6.10
      Timeout: 6
      Environment:
        Variables:
          PASSWORD: {{ super_secret }}
    DependsOn:
      - LogGroup
      - IamRoleLambdaExecution
  ApiGatewayRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: {{ service_name }}
  ApiGatewayResourceWhateverVar:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt
        - ApiGatewayRestApi
        - RootResourceId
      PathPart: '{whatever}'
      RestApiId: !Ref ApiGatewayRestApi
  ApiGatewayMethodWhateverVarGet:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: GET
      RequestParameters: {}
      ResourceId: !Ref ApiGatewayResourceWhateverVar
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: true
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt
              - LambdaFunction
              - Arn
            - /invocations
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{ "whatever" : "$input.params(''whatever'')" }'
        IntegrationResponses:
          - StatusCode: 200
            SelectionPattern: ''
            ResponseParameters: {}
            ResponseTemplates: {}
      MethodResponses:
        - ResponseParameters: {}
          ResponseModels: {}
          StatusCode: 200
  ApiGatewayDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: {{ service_name }}
    DependsOn:
      - ApiGatewayMethodWhateverVarGet
  ApiGatewayUsagePlan:
    Type: 'AWS::ApiGateway::UsagePlan'
    DependsOn: ApiGatewayDeployment
    Properties:
      ApiStages:
        - ApiId: !Ref ApiGatewayRestApi
          Stage: {{ service_name }}
      UsagePlanName: {{ service_name }}
  ApiGatewayUsagePlanKey1:
    Type: 'AWS::ApiGateway::UsagePlanKey'
    Properties:
      KeyId: !ImportValue exported-api-key
      KeyType: API_KEY
      UsagePlanId: !Ref ApiGatewayUsagePlan
  LambdaPermissionApiGateway:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt
        - LambdaFunction
        - Arn
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref ApiGatewayRestApi
          - /*/*
Outputs:
  ServiceEndpoint:
    Description: URL of the service endpoint
    Value: !Join
      - ''
      - - 'https://'
        - !Ref ApiGatewayRestApi
        - .execute-api.us-east-1.amazonaws.com/
        - {{ service_name }}
